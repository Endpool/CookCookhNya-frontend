#include "add.hpp"

#include "handlers/common.hpp"
#include "message_tracker.hpp"
#include "render/storage/members/add.hpp"
#include "render/storage/members/view.hpp"
#include "utils.hpp"

#include <tgbot/types/MessageOriginHiddenUser.h>
#include <tgbot/types/MessageOriginUser.h>

#include <memory>
#include <stdexcept>

namespace cookcookhnya::handlers::storage::members {

using namespace render::storage::members;

void handleStorageMemberAdditionMsg(
    StorageMemberAddition& state, MessageRef m, BotRef bot, SMRef stateManager, StorageApiRef storageApi) {
    auto chatId = m.chat->id;
    auto userId = m.from->id;

    auto originUser = std::dynamic_pointer_cast<TgBot::MessageOriginUser>(m.forwardOrigin);
    if (originUser != nullptr) {
        auto memberId = originUser->senderUser->id;
        try {
            storageApi.addMember(userId, state.storageId, memberId);
        } catch (std::runtime_error&) {
            auto text = utils::utf8str(u8"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CookCookhNya");
            bot.sendMessage(chatId, text);
        }
    } else {
        if (std::dynamic_pointer_cast<TgBot::MessageOriginHiddenUser>(m.forwardOrigin) != nullptr) {
            auto text = utils::utf8str(u8"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª –∞–∫–∫–∞—É–Ω—Ç");
            bot.sendMessage(chatId, text);
        } else {
            auto text = utils::utf8str(u8"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            bot.sendMessage(chatId, text);
        }
    }
    auto text = utils::utf8str(
        u8"üì© –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n");
    auto messageId = message::getMessageId(userId);
    if (messageId) {
        bot.editMessageText(text, chatId, *messageId);
    }
    renderMemberList(false, state.storageId, userId, chatId, bot, storageApi);
    stateManager.put(StorageMemberView{state.storageId});
};

void handleStorageMemberAdditionCQ(
    StorageMemberAddition& state, CallbackQueryRef cq, BotRef bot, SMRef stateManager, StorageApiRef storageApi) {
    bot.answerCallbackQuery(cq.id);
    auto chatId = cq.message->chat->id;
    auto userId = cq.from->id;
    if (cq.data == "back") {
        renderMemberList(true, state.storageId, userId, chatId, bot, storageApi);
        stateManager.put(StorageMemberView{state.storageId});
    }
    if (cq.data == "create_link") {
        renderShareLinkMemberAddition(state.storageId, userId, chatId, bot, storageApi);
    }
};

} // namespace cookcookhnya::handlers::storage::members
