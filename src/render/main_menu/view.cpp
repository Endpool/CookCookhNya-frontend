#include "view.hpp"

#include "backend/api/storages.hpp"
#include "message_tracker.hpp"
#include "render/common.hpp"
#include "utils/utils.hpp"

#include <optional>
#include <string>
#include <utility>

namespace cookcookhnya::render::main_menu {

using namespace tg_types;

void renderMainMenu(bool toBeEdited,
                    std::optional<std::optional<std::string>> inviteStorage,
                    UserId userId,
                    ChatId chatId,
                    BotRef bot,
                    api::StorageApiRef storageApi) {
    auto storages = storageApi.getStoragesList(userId);

    auto text = utils::utf8str(
        u8"üç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CookCookNya ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!");
    if (inviteStorage) {
        if (*inviteStorage)
            text += utils::utf8str(u8"\n\n–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ üç±") + **inviteStorage;
        else
            text += utils::utf8str(u8"\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ü•≤");
    }

    const std::size_t rowsCount = 5;
    InlineKeyboardBuilder keyboard{rowsCount};
    keyboard << makeCallbackButton(u8"üç± –•—Ä–∞–Ω–∏–ª–∏—â–∞", "storage_list") << NewRow{};
    if (!storages.empty())
        keyboard << makeCallbackButton(u8"üòã –•–æ—á—É –∫—É—à–∞—Ç—å!", "wanna_eat") << NewRow{};
    keyboard << makeCallbackButton(u8"üßæ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", "shopping_list") << NewRow{}
             << makeCallbackButton(u8"üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã", "recipes_search") << NewRow{}
             << makeCallbackButton(u8"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "personal_account");

    if (toBeEdited) {
        if (auto messageId = message::getMessageId(userId))
            bot.editMessageText(text, chatId, *messageId, std::move(keyboard));
    } else {
        auto message = bot.sendMessage(chatId, text, std::move(keyboard));
        message::addMessageId(userId, message->messageId);
    }
}

} // namespace cookcookhnya::render::main_menu
