#include "storage_members_render.hpp"

#include "message_tracker.hpp"
#include "render/common.hpp"
#include "utils.hpp"
#include <format>
#include <iterator>
#include <ranges>
#include <string>
#include <utility>

namespace cookcookhnya::render::storage::member_list {

void renderMemberList(
    bool toBeEdited, const StorageId& storageId, UserId userId, ChatId chatId, BotRef bot, StorageApiRef storageApi) {
    auto storage = storageApi.get(userId, storageId);
    bool isOwner = storage.ownerId == userId;
    unsigned int buttonRows = isOwner ? 2 : 1;

    InlineKeyboard keyboard(buttonRows);

    if (isOwner) {
        keyboard[0].push_back(detail::makeCallbackButton(utils::utf8str(u8"üîê –î–æ–±–∞–≤–∏—Ç—å"), "add_member"));
        if (storageApi.getStorageMembers(userId, storageId).size() > 1) {
            keyboard[0].push_back(detail::makeCallbackButton(utils::utf8str(u8"üîí –£–¥–∞–ª–∏—Ç—å"), "delete_member"));
        }
        keyboard[1].push_back(detail::makeCallbackButton(utils::utf8str(u8"‚Ü©Ô∏è–ù–∞–∑–∞–¥"), "back_to_view_storage"));
    } else {
        keyboard[0].push_back(detail::makeCallbackButton(utils::utf8str(u8"‚Ü©Ô∏è–ù–∞–∑–∞–¥"), "back_to_view_storage"));
    }

    std::string list;
    std::vector<std::string> memberNames;
    for (const auto& memberDetails : storageApi.getStorageMembers(userId, storageId)) {
        memberNames.push_back(memberDetails.fullName);
    }
    for (auto [i, name] : std::views::enumerate(memberNames))
        std::format_to(std::back_inserter(list), "  {}. {}\n", i + 1, name);
    auto text = utils::utf8str(u8"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n") + list;
    if (toBeEdited) {
        auto messageId = message::getMessageId(userId);
        bot.editMessageText(text, chatId, *messageId, "", "", nullptr, detail::makeKeyboardMarkup(std::move(keyboard)));
    } else {
        auto messageId =
            bot.sendMessage(chatId, text, nullptr, nullptr, detail::makeKeyboardMarkup(std::move(keyboard)));
        message::addMessageId(userId, messageId->messageId);
    }
};

void renderMemberAdditionPrompt(
    const StorageId& storageId, UserId userId, ChatId chatId, BotRef bot, StorageApiRef storageApi) {
    auto storage = storageApi.get(userId, storageId);
    unsigned int buttonRows = 1;

    InlineKeyboard keyboard(buttonRows);
    keyboard[0].push_back(detail::makeCallbackButton(utils::utf8str(u8"üö´ –û—Ç–º–µ–Ω–∞"), "cancel_member_addition"));
    auto text = utils::utf8str(u8"üì© –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n");
    auto messageId = message::getMessageId(userId);
    bot.editMessageText(text, chatId, *messageId, "", "", nullptr, detail::makeKeyboardMarkup(std::move(keyboard)));
};

void renderMemberDeletionPrompt(
    const StorageId& storageId, UserId userId, ChatId chatId, BotRef bot, StorageApiRef storageApi) {
    auto storage = storageApi.get(userId, storageId);

    auto members = storageApi.getStorageMembers(userId, storageId);
    std::cerr << userId << storage.ownerId << '\n';
    unsigned int buttonRows = members.size();
    InlineKeyboard keyboard(buttonRows);
    keyboard[0].push_back(detail::makeCallbackButton(utils::utf8str(u8"üö´ –û—Ç–º–µ–Ω–∞"), "cancel_member_deletion"));
    size_t k = 1;
    for (auto& member : members) {
        if (member.userId != storage.ownerId) {
            keyboard[k++].push_back(detail::makeCallbackButton(utils::utf8str(u8"üë§ ") + member.fullName,
                                                               "mem_" + std::to_string(member.userId)));
        }
    }

    auto text = utils::utf8str(u8"üö∑ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n");
    auto messageId = message::getMessageId(userId);
    bot.editMessageText(text, chatId, *messageId, "", "", nullptr, detail::makeKeyboardMarkup(std::move(keyboard)));
};

} // namespace cookcookhnya::render::storage::member_list
