name: ci pipeline for frontend

on:
  push:
    branches:
      - main
      - dev

jobs:
  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup C++ tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: clang
          compiler_version: '19'
          clangtidy: true
          clangformat: true
          cmake: true
      
      - name: Cache Conan dependencies
        uses: actions/cache@v3
        id: conan-cache
        with:
          path: |
            ~/.conan2
            /tmp/deps
          key: ${{ runner.os }}-conan-cpp23-${{ hashFiles('Frontend/conanfile.txt') }}-tgbotstater-0.3.4
          restore-keys: |
            ${{ runner.os }}-conan-cpp23-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            parallel \
            python3-pip \
            build-essential \
            wget \
            tar
      
      - name: Install Conan via pip
        run: |
          python3 -m pip install --user conan==2.15.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Set up Conan profile
        working-directory: .
        run: |
          mkdir -p $HOME/.conan2/profiles
          conan profile detect --name=default --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=23/' $HOME/.conan2/profiles/default
          cat $HOME/.conan2/profiles/default
      
      - name: Install tgbotstater dependency
        if: steps.conan-cache.outputs.cache-hit != 'true'
        working-directory: /tmp/deps
        run: |
          mkdir -p /tmp/deps
          cd /tmp/deps
          wget https://github.com/Makcal/TgBotStater/archive/refs/tags/v0.3.4.tar.gz
          tar -xvf v0.3.4.tar.gz
          cd TgBotStater-0.3.4
          conan create . --build=missing
      
      - name: Install project dependencies
        working-directory: .
        run: |
          conan install . --build=missing
      
      - name: Configure CMake
        working-directory: .
        run: |
          mkdir -p build/Release
          cmake --preset=conan-release
      
      - name: Build project
        working-directory: .
        run: |
          cmake --build --preset=conan-release
      
      - name: Verify compilation database
        working-directory: .
        run: |
          if [ ! -f build/Release/compile_commands.json ]; then
            echo "Generating compilation database..."
            cmake --build --preset=conan-release --target clang-tidy
          fi
          ls -la build/Release/compile_commands.json
      
      - name: Check tool versions
        run: |
          clang-format --version
          clang-tidy --version
          cmake --version
      
      - name: Run clang-format checks
        working-directory: .
        run: |
          find src include -type f \( -name '*.hpp' -or -name '*.cpp' \) \
            -exec clang-format --dry-run --Werror {} \;
      
      - name: Run clang-tidy
        working-directory: .
        run: |
          cd build/Release
          run-clang-tidy -j$(nproc) -quiet
